import os
import subprocess
import re
import sqlite3 as sl

def main(): 

    if not os.path.exists('exploitdb'):
        print('Cloning ExploitDB, please wait...')
        subprocess.getoutput('git clone https://github.com/offensive-security/exploitdb.git')
    if not os.path.exists('exploits.db'):
        print('Populating database')
        db_create()
    refresher()
    con = sl.connect('exploits.db')
    all_files = {}
    all_files['all_files'] = []
    find_all_files(all_files,'exploitdb/exploits')
    for i in all_files['all_files']:
        with open(i['file'], 'r') as f:
            for line in f:
                if 'cve' in line.lower():
                    cves = re.findall(r'((?:CVE|cve)-(?:1999|2\d{3})-(?:0\d{2}[1-9]|[1-9]\d{3,}))', line)
                    if cves:
                        for cve in cves:
                            db_writer(con, cve, i['file'])

def refresher():  # does a fresh pull of ExploitDB
    subprocess.getoutput("git -C exploitdb/ pull")

def db_create():  # creates db
    con = sl.connect('exploits.db')
    with con:
        con.execute("""
            CREATE TABLE EXPLOITS (
                id INTEGER NOT NULL PRIMARY KEY,
                cve TEXT,
                file TEXT
                );
            """)
    con.close()

def find_all_files(all_files,dir):  # recursive function to find all files in a directory
    for root, dirs, files in os.walk(dir):
        for file in files:
                all_files['all_files'].append({'file': os.path.join(root, file)})
    return all_files

def db_writer(con, cve, file):  # writes to the database
    check_first = con.execute('SELECT * FROM EXPLOITS WHERE cve = ? AND file = ?', (cve, file))
    entry = check_first.fetchone()
    if entry is None:
        with con:
            con.execute('INSERT INTO EXPLOITS (id, cve, file) VALUES (null, ?, ?)', (cve, file))

def cve_exploit(cve):  # returns list of exploits
    con = sl.connect('exploits.db')
    with con:
        get_results = con.execute('SELECT file FROM EXPLOITS WHERE cve = ? COLLATE NOCASE', (cve,))
        return [res[0] for res in get_results.fetchall()]

if __name__ == '__main__':
    main()